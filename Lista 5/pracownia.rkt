#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.12 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 58 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 218 218 253 0 0 0 -1
-1 2 37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 218 218 253 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 236 145 88 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 236 145 88 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 150 150 150 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 150 150 150 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 48 134 253 0 0 0 -1
-1 2 39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 48 134 253 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 92 -1 90 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 92 -1 90 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 190 0 0 0 0 0 -1 -1
2 36 #"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 190 0 0 0 0 0 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 2151 0 31 3 12 #"#lang racket"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 66
(
 #";; pomocnicza funkcja dla lis"
 #"t tagowanych o okre\305\233lonej d\305\202ugo\305\233ci"
) 0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 13 #"tagged-tuple?"
0 0 27 3 1 #" "
0 0 14 3 3 #"tag"
0 0 27 3 1 #" "
0 0 14 3 3 #"len"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 1 #"="
0 0 27 3 2 #" ("
0 0 14 3 6 #"length"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 2 #") "
0 0 14 3 3 #"len"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 3 #"eq?"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 2 #") "
0 0 14 3 3 #"tag"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 12 #"tagged-list?"
0 0 27 3 1 #" "
0 0 14 3 3 #"tag"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 3 #"eq?"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 2 #") "
0 0 14 3 3 #"tag"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 5 #"list?"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 50
#";; reprezentacja danych wej\305\233ciowych (z \304\207wicze\305\204)"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 4 #"var?"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 7 #"symbol?"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 3 #"var"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 8 #"var-name"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 35 #";; przydatne predykaty na zmiennych"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 5 #"var<?"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 1 #"y"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 8 #"symbol<?"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 1 #"y"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 5 #"var=?"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 1 #"y"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 3 #"eq?"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 1 #"y"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 8 #"literal?"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 13 #"tagged-tuple?"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 7 #"literal"
0 0 27 3 1 #" "
0 0 23 3 1 #"3"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 8 #"boolean?"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 4 #"var?"
0 0 27 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 7 #"literal"
0 0 27 3 1 #" "
0 0 14 3 3 #"pol"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 7 #"literal"
0 0 27 3 1 #" "
0 0 14 3 3 #"pol"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 11 #"literal-pol"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 4 #"cadr"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 11 #"literal-var"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 5 #"caddr"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 7 #"clause?"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 12 #"tagged-list?"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 6 #"clause"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 6 #"andmap"
0 0 27 3 1 #" "
0 0 14 3 8 #"literal?"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 6 #"clause"
0 0 27 3 1 #" "
0 0 31 3 1 #"."
0 0 27 3 1 #" "
0 0 14 3 4 #"lits"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 6 #"clause"
0 0 27 3 1 #" "
0 0 14 3 4 #"lits"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 11 #"clause-lits"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cnf?"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 12 #"tagged-list?"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 3 #"cnf"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 6 #"andmap"
0 0 27 3 1 #" "
0 0 14 3 7 #"clause?"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cnf"
0 0 27 3 1 #" "
0 0 31 3 1 #"."
0 0 27 3 1 #" "
0 0 14 3 2 #"cs"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 3 #"cnf"
0 0 27 3 1 #" "
0 0 14 3 2 #"cs"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 11 #"cnf-clauses"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 92
(
 #";; oblicza warto\305\233\304\207 form"
 #"u\305\202y w CNF z cz\304\231\305\233ciowym"
 #" warto\305\233ciowaniem. je\305\233li zmienna nie jest"
) 0 0 27 29 1 #"\n"
0 0 18 3 56
(
 #";; zwarto\305\233ciowana, litera\305\202 jest uznawany za fa\305\202"
 #"szywy."
) 0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 15 #"valuate-partial"
0 0 27 3 1 #" "
0 0 14 3 3 #"val"
0 0 27 3 1 #" "
0 0 14 3 4 #"form"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 7 #"val-lit"
0 0 27 3 1 #" "
0 0 14 3 1 #"l"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 16 3 3 #"let"
0 0 27 3 3 #" (("
0 0 14 3 1 #"r"
0 0 27 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 27 3 2 #" ("
0 0 14 3 11 #"literal-var"
0 0 27 3 1 #" "
0 0 14 3 1 #"l"
0 0 27 3 2 #") "
0 0 14 3 3 #"val"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"       [("
0 0 14 3 3 #"not"
0 0 27 3 1 #" "
0 0 14 3 1 #"r"
0 0 27 3 3 #")  "
0 0 14 3 5 #"false"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"       [("
0 0 14 3 4 #"cadr"
0 0 27 3 1 #" "
0 0 14 3 1 #"r"
0 0 27 3 3 #") ("
0 0 14 3 11 #"literal-pol"
0 0 27 3 1 #" "
0 0 14 3 1 #"l"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 27 3 6 #"     ("
0 0 14 3 3 #"not"
0 0 27 3 2 #" ("
0 0 14 3 11 #"literal-pol"
0 0 27 3 1 #" "
0 0 14 3 1 #"l"
0 0 27 3 6 #"))])))"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 10 #"val-clause"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 5 #"ormap"
0 0 27 3 1 #" "
0 0 14 3 7 #"val-lit"
0 0 27 3 2 #" ("
0 0 14 3 11 #"clause-lits"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 6 #"andmap"
0 0 27 3 1 #" "
0 0 14 3 10 #"val-clause"
0 0 27 3 2 #" ("
0 0 14 3 11 #"cnf-clauses"
0 0 27 3 1 #" "
0 0 14 3 4 #"form"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 39 #";; reprezentacja dowod\303\263w sprzeczno\305\233ci"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 6 #"axiom?"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 13 #"tagged-tuple?"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"axiom"
0 0 27 3 1 #" "
0 0 23 3 1 #"2"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 11 #"proof-axiom"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"axiom"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 12 #"axiom-clause"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 4 #"cadr"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 4 #"res?"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 13 #"tagged-tuple?"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 7 #"resolve"
0 0 27 3 1 #" "
0 0 23 3 1 #"4"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 9 #"proof-res"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 2 #"pp"
0 0 27 3 1 #" "
0 0 14 3 2 #"pn"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 7 #"resolve"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 2 #"pp"
0 0 27 3 1 #" "
0 0 14 3 2 #"pn"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 7 #"res-var"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 4 #"cadr"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 13 #"res-proof-pos"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 5 #"caddr"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 13 #"res-proof-neg"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 6 #"cadddr"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 51
(
 #";; sprawdza struktur\304\231, ale nie poprawno\305\233\304\207 dowod"
 #"u"
) 0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 6 #"proof?"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 27 3 2 #" ("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 6 #"axiom?"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"           ("
0 0 14 3 7 #"clause?"
0 0 27 3 2 #" ("
0 0 14 3 12 #"axiom-clause"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 4 #"res?"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"           ("
0 0 14 3 4 #"var?"
0 0 27 3 2 #" ("
0 0 14 3 7 #"res-var"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"           ("
0 0 14 3 6 #"proof?"
0 0 27 3 2 #" ("
0 0 14 3 13 #"res-proof-pos"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"           ("
0 0 14 3 6 #"proof?"
0 0 27 3 2 #" ("
0 0 14 3 13 #"res-proof-neg"
0 0 27 3 1 #" "
0 0 14 3 1 #"p"
0 0 27 3 5 #")))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 46
#";; procedura sprawdzaj\304\205ca poprawno\305\233\304\207 dowodu"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 11 #"check-proof"
0 0 27 3 1 #" "
0 0 14 3 2 #"pf"
0 0 27 3 1 #" "
0 0 14 3 4 #"form"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 9 #"run-axiom"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 9 #"displayln"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 8 #"checking"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"axiom"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 6 #"member"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 2 #" ("
0 0 14 3 11 #"cnf-clauses"
0 0 27 3 1 #" "
0 0 14 3 4 #"form"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"         ("
0 0 14 3 11 #"clause-lits"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 7 #"run-res"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 4 #"cpos"
0 0 27 3 1 #" "
0 0 14 3 4 #"cneg"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 9 #"displayln"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 8 #"checking"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 10 #"resolution"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 2 #"of"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 3 #"for"
0 0 27 3 1 #" "
0 0 14 3 4 #"cpos"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 3 #"and"
0 0 27 3 1 #" "
0 0 14 3 4 #"cneg"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 5 #"findf"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"l"
0 0 27 3 3 #") ("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 11 #"literal-pol"
0 0 27 3 1 #" "
0 0 14 3 1 #"l"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 34 #"                                 ("
0 0 14 3 3 #"eq?"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 2 #" ("
0 0 14 3 11 #"literal-var"
0 0 27 3 1 #" "
0 0 14 3 1 #"l"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 14 3 4 #"cpos"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"         ("
0 0 14 3 5 #"findf"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"l"
0 0 27 3 3 #") ("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 3 #"not"
0 0 27 3 2 #" ("
0 0 14 3 11 #"literal-pol"
0 0 27 3 1 #" "
0 0 14 3 1 #"l"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 34 #"                                 ("
0 0 14 3 3 #"eq?"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 2 #" ("
0 0 14 3 11 #"literal-var"
0 0 27 3 1 #" "
0 0 14 3 1 #"l"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 14 3 4 #"cneg"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"         ("
0 0 14 3 6 #"append"
0 0 27 3 2 #" ("
0 0 14 3 7 #"remove*"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 7 #"literal"
0 0 27 3 1 #" "
0 0 14 3 4 #"true"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 4 #"))  "
0 0 14 3 4 #"cpos"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 18 #"                 ("
0 0 14 3 7 #"remove*"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 7 #"literal"
0 0 27 3 1 #" "
0 0 14 3 5 #"false"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 3 #")) "
0 0 14 3 4 #"cneg"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 9 #"run-proof"
0 0 27 3 1 #" "
0 0 14 3 2 #"pf"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"     [("
0 0 14 3 6 #"axiom?"
0 0 27 3 1 #" "
0 0 14 3 2 #"pf"
0 0 27 3 3 #") ("
0 0 14 3 9 #"run-axiom"
0 0 27 3 2 #" ("
0 0 14 3 12 #"axiom-clause"
0 0 27 3 1 #" "
0 0 14 3 2 #"pf"
0 0 27 3 3 #"))]"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"     [("
0 0 14 3 4 #"res?"
0 0 27 3 1 #" "
0 0 14 3 2 #"pf"
0 0 27 3 5 #")   ("
0 0 14 3 7 #"run-res"
0 0 27 3 2 #" ("
0 0 14 3 7 #"res-var"
0 0 27 3 1 #" "
0 0 14 3 2 #"pf"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 28 #"                           ("
0 0 14 3 9 #"run-proof"
0 0 27 3 2 #" ("
0 0 14 3 13 #"res-proof-pos"
0 0 27 3 1 #" "
0 0 14 3 2 #"pf"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 28 #"                           ("
0 0 14 3 9 #"run-proof"
0 0 27 3 2 #" ("
0 0 14 3 13 #"res-proof-neg"
0 0 27 3 1 #" "
0 0 14 3 2 #"pf"
0 0 27 3 4 #")))]"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ["
0 0 14 3 4 #"else"
0 0 27 3 8 #"        "
0 0 14 3 5 #"false"
0 0 27 3 3 #"]))"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 5 #"null?"
0 0 27 3 2 #" ("
0 0 14 3 9 #"run-proof"
0 0 27 3 1 #" "
0 0 14 3 2 #"pf"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 28 #";; reprezentacja wewn\304\231trzna"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 72
(
 #";; sprawdza posortowanie w porz\304\205dku \305\233ci\305\233le rosn"
 #"\304\205cym, bez duplikat\303\263w"
) 0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 7 #"sorted?"
0 0 27 3 1 #" "
0 0 14 3 2 #"vs"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 27 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 27 3 1 #" "
0 0 14 3 2 #"vs"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 5 #"null?"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 2 #"vs"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 5 #"var<?"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 2 #"vs"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 27 3 1 #" "
0 0 14 3 2 #"vs"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"           ("
0 0 14 3 7 #"sorted?"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 2 #"vs"
0 0 27 3 5 #")))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 15 #"sorted-varlist?"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 6 #"andmap"
0 0 27 3 2 #" ("
0 0 14 3 4 #"var?"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 7 #"sorted?"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 100
(
 #";; klauzul\304\231 reprezentuje"
 #"my jako par\304\231 list \342\200\224 os"
 #"obno wyst\304\205pienia pozytywne i negatywne. Dodatkowo"
) 0 0 27 29 1 #"\n"
0 0 18 3 64
(
 #";; pami\304\231tamy wyprowadzenie tej klauzuli (dow\303\263d) i jej "
 #"rozmiar."
) 0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 11 #"res-clause?"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 13 #"tagged-tuple?"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 7 #"res-int"
0 0 27 3 1 #" "
0 0 23 3 1 #"5"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 15 #"sorted-varlist?"
0 0 27 3 2 #" ("
0 0 14 3 6 #"second"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 15 #"sorted-varlist?"
0 0 27 3 2 #" ("
0 0 14 3 5 #"third"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 1 #"="
0 0 27 3 2 #" ("
0 0 14 3 6 #"fourth"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 3 #") ("
0 0 14 3 1 #"+"
0 0 27 3 2 #" ("
0 0 14 3 6 #"length"
0 0 27 3 2 #" ("
0 0 14 3 6 #"second"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 4 #")) ("
0 0 14 3 6 #"length"
0 0 27 3 2 #" ("
0 0 14 3 5 #"third"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 6 #"proof?"
0 0 27 3 2 #" ("
0 0 14 3 5 #"fifth"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 10 #"res-clause"
0 0 27 3 1 #" "
0 0 14 3 3 #"pos"
0 0 27 3 1 #" "
0 0 14 3 3 #"neg"
0 0 27 3 1 #" "
0 0 14 3 5 #"proof"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 7 #"res-int"
0 0 27 3 1 #" "
0 0 14 3 3 #"pos"
0 0 27 3 1 #" "
0 0 14 3 3 #"neg"
0 0 27 3 2 #" ("
0 0 14 3 1 #"+"
0 0 27 3 2 #" ("
0 0 14 3 6 #"length"
0 0 27 3 1 #" "
0 0 14 3 3 #"pos"
0 0 27 3 3 #") ("
0 0 14 3 6 #"length"
0 0 27 3 1 #" "
0 0 14 3 3 #"neg"
0 0 27 3 3 #")) "
0 0 14 3 5 #"proof"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 14 #"res-clause-pos"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 6 #"second"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 14 #"res-clause-neg"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 5 #"third"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 15 #"res-clause-size"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 6 #"fourth"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 16 #"res-clause-proof"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 5 #"fifth"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 102
(
 #";; przedstawia klauzul\304\231 jak"
 #"o par\304\231 list zmiennych wyst\304\231puj\304\205cych odpowiednio"
 #" pozytywnie i negatywnie"
) 0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 16 #"print-res-clause"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 14 #"res-clause-pos"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 3 #") ("
0 0 14 3 14 #"res-clause-neg"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 34 #";; sprawdzanie klauzuli sprzecznej"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 13 #"clause-false?"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 27 3 2 #" ("
0 0 14 3 14 #"res-clause-pos"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 5 #"null?"
0 0 27 3 2 #" ("
0 0 14 3 14 #"res-clause-neg"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 77
(
 #";; pomocnicze procedury: scalanie i usuwanie duplikat\303\263w z lis"
 #"t posortowanych"
) 0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 10 #"merge-vars"
0 0 27 3 1 #" "
0 0 14 3 2 #"xs"
0 0 27 3 1 #" "
0 0 14 3 2 #"ys"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 27 3 1 #" "
0 0 14 3 2 #"xs"
0 0 27 3 2 #") "
0 0 14 3 2 #"ys"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"        [("
0 0 14 3 5 #"null?"
0 0 27 3 1 #" "
0 0 14 3 2 #"ys"
0 0 27 3 2 #") "
0 0 14 3 2 #"xs"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"        [("
0 0 14 3 5 #"var<?"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 2 #"xs"
0 0 27 3 3 #") ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 2 #"ys"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 2 #"xs"
0 0 27 3 3 #") ("
0 0 14 3 10 #"merge-vars"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 2 #"xs"
0 0 27 3 2 #") "
0 0 14 3 2 #"ys"
0 0 27 3 3 #"))]"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"        [("
0 0 14 3 5 #"var<?"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 2 #"ys"
0 0 27 3 3 #") ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 2 #"xs"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 2 #"ys"
0 0 27 3 3 #") ("
0 0 14 3 10 #"merge-vars"
0 0 27 3 1 #" "
0 0 14 3 2 #"xs"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 2 #"ys"
0 0 27 3 4 #")))]"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 2 #"xs"
0 0 27 3 3 #") ("
0 0 14 3 10 #"merge-vars"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 2 #"xs"
0 0 27 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 2 #"ys"
0 0 27 3 6 #")))]))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 22 #"remove-duplicates-vars"
0 0 27 3 1 #" "
0 0 14 3 2 #"xs"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 27 3 1 #" "
0 0 14 3 2 #"xs"
0 0 27 3 2 #") "
0 0 14 3 2 #"xs"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"        [("
0 0 14 3 5 #"null?"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 2 #"xs"
0 0 27 3 3 #")) "
0 0 14 3 2 #"xs"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"        [("
0 0 14 3 5 #"var=?"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 2 #"xs"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 27 3 1 #" "
0 0 14 3 2 #"xs"
0 0 27 3 4 #")) ("
0 0 14 3 22 #"remove-duplicates-vars"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 2 #"xs"
0 0 27 3 3 #"))]"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 2 #"xs"
0 0 27 3 3 #") ("
0 0 14 3 22 #"remove-duplicates-vars"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 2 #"xs"
0 0 27 3 6 #")))]))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 10 #"rev-append"
0 0 27 3 1 #" "
0 0 14 3 2 #"xs"
0 0 27 3 1 #" "
0 0 14 3 2 #"ys"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 27 3 1 #" "
0 0 14 3 2 #"xs"
0 0 27 3 2 #") "
0 0 14 3 2 #"ys"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 10 #"rev-append"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 2 #"xs"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 2 #"xs"
0 0 27 3 2 #") "
0 0 14 3 2 #"ys"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 64
(
 #";; TODO: miejsce na uzupe\305\202nienie w\305\202asnych funkcji pomo"
 #"cniczych"
) 0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 15 #"clause-trivial?"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 18 3 23 #";; TODO: zaimplementuj!"
0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 14 3 5 #"false"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 7 #"resolve"
0 0 27 3 1 #" "
0 0 14 3 2 #"c1"
0 0 27 3 1 #" "
0 0 14 3 2 #"c2"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 18 3 23 #";; TODO: zaimplementuj!"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 18 #"\"Not implemented!\""
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 20 #"resolve-single-prove"
0 0 27 3 1 #" "
0 0 14 3 8 #"s-clause"
0 0 27 3 1 #" "
0 0 14 3 7 #"checked"
0 0 27 3 1 #" "
0 0 14 3 7 #"pending"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 18 3 23 #";; TODO: zaimplementuj!"
0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 18 3 104
(
 #";; Poni\305\274sza implementacj"
 #"a dzia\305\202a w ten sam spos\303\263b co dla wi\304\231kszych klau"
 #"zul \342\200\224 \305\202atwo j\304\205 poprawi\304\207!"
) 0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"let*"
0 0 27 3 3 #" (("
0 0 14 3 10 #"resolvents"
0 0 27 3 4 #"   ("
0 0 14 3 10 #"filter-map"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"c"
0 0 27 3 3 #") ("
0 0 14 3 7 #"resolve"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 1 #" "
0 0 14 3 8 #"s-clause"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 37 #"                                     "
0 0 14 3 7 #"checked"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"         ("
0 0 14 3 9 #"sorted-rs"
0 0 27 3 5 #"    ("
0 0 14 3 4 #"sort"
0 0 27 3 1 #" "
0 0 14 3 10 #"resolvents"
0 0 27 3 1 #" "
0 0 14 3 1 #"<"
0 0 27 3 1 #" "
0 0 25 3 5 #"#:key"
0 0 27 3 1 #" "
0 0 14 3 15 #"res-clause-size"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 17 #"subsume-add-prove"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 14 3 8 #"s-clause"
0 0 27 3 1 #" "
0 0 14 3 7 #"checked"
0 0 27 3 2 #") "
0 0 14 3 7 #"pending"
0 0 27 3 1 #" "
0 0 14 3 9 #"sorted-rs"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 71
(
 #";; wstawianie klauzuli w posortowan\304\205 wzgl\304\231dem rozmiaru"
 #" list\304\231 klauzul"
) 0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 6 #"insert"
0 0 27 3 1 #" "
0 0 14 3 2 #"nc"
0 0 27 3 1 #" "
0 0 14 3 3 #"ncs"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"   [("
0 0 14 3 5 #"null?"
0 0 27 3 1 #" "
0 0 14 3 3 #"ncs"
0 0 27 3 23 #")                     ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 2 #"nc"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"   [("
0 0 14 3 1 #"<"
0 0 27 3 2 #" ("
0 0 14 3 15 #"res-clause-size"
0 0 27 3 1 #" "
0 0 14 3 2 #"nc"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 15 #"res-clause-size"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 3 #"ncs"
0 0 27 3 5 #"))) ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 14 3 2 #"nc"
0 0 27 3 1 #" "
0 0 14 3 3 #"ncs"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"   ["
0 0 14 3 4 #"else"
0 0 27 3 29 #"                            ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 3 #"ncs"
0 0 27 3 3 #") ("
0 0 14 3 6 #"insert"
0 0 27 3 1 #" "
0 0 14 3 2 #"nc"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 3 #"ncs"
0 0 27 3 6 #")))]))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 68
(
 #";; sortowanie klauzul wzgl\304\231dem rozmiaru (funkcja biblioteczna"
 #" sort)"
) 0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 12 #"sort-clauses"
0 0 27 3 1 #" "
0 0 14 3 2 #"cs"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 4 #"sort"
0 0 27 3 1 #" "
0 0 14 3 2 #"cs"
0 0 27 3 1 #" "
0 0 14 3 1 #"<"
0 0 27 3 1 #" "
0 0 25 3 5 #"#:key"
0 0 27 3 1 #" "
0 0 14 3 15 #"res-clause-size"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 53
(
 #";; g\305\202\303\263wna procedura szu"
 #"kaj\304\205ca dowodu sprzeczno\305\233ci"
) 0 0 27 29 1 #"\n"
0 0 18 3 70
(
 #";; zak\305\202adamy \305\274e w checked i pending nigdy nie ma klauz"
 #"uli sprzecznej"
) 0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 13 #"resolve-prove"
0 0 27 3 1 #" "
0 0 14 3 7 #"checked"
0 0 27 3 1 #" "
0 0 14 3 7 #"pending"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"   "
0 0 18 3 94
(
 #";; je\305\233li lista pending jest pusta, to checked jest zamkni\304"
 #"\231ta na rezolucj\304\231 czyli spe\305\202nialna"
) 0 0 27 29 1 #"\n"
0 0 27 3 5 #"   [("
0 0 14 3 5 #"null?"
0 0 27 3 1 #" "
0 0 14 3 7 #"pending"
0 0 27 3 3 #") ("
0 0 14 3 18 #"generate-valuation"
0 0 27 3 2 #" ("
0 0 14 3 12 #"sort-clauses"
0 0 27 3 1 #" "
0 0 14 3 7 #"checked"
0 0 27 3 3 #"))]"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"   "
0 0 18 3 96
(
 #";; je\305\233li klauzula ma jeden litera\305\202, to mo\305\274emy t"
 #"raktowa\304\207 \305\202atwo i efek"
 #"tywnie j\304\205 przetworzy\304\207"
) 0 0 27 29 1 #"\n"
0 0 27 3 5 #"   [("
0 0 14 3 1 #"="
0 0 27 3 1 #" "
0 0 23 3 1 #"1"
0 0 27 3 2 #" ("
0 0 14 3 15 #"res-clause-size"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 7 #"pending"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 20 #"resolve-single-prove"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 7 #"pending"
0 0 27 3 2 #") "
0 0 14 3 7 #"checked"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 7 #"pending"
0 0 27 3 3 #"))]"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"   "
0 0 18 3 90
(
 #";; w przeciwnym wypadku wykonujemy rezolucj\304\231 z wszystkimi kla"
 #"uzulami ju\305\274 sprawdzonymi, a"
) 0 0 27 29 1 #"\n"
0 0 27 3 3 #"   "
0 0 18 3 77
(
 #";; nast\304\231pnie dodajemy otrzymane klauzule do zbioru i kontynuu"
 #"jemy obliczenia"
) 0 0 27 29 1 #"\n"
0 0 27 3 4 #"   ["
0 0 14 3 4 #"else"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 16 3 4 #"let*"
0 0 27 3 3 #" (("
0 0 14 3 11 #"next-clause"
0 0 27 3 3 #"  ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 7 #"pending"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"           ("
0 0 14 3 12 #"rest-pending"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 7 #"pending"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"           ("
0 0 14 3 10 #"resolvents"
0 0 27 3 4 #"   ("
0 0 14 3 10 #"filter-map"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"c"
0 0 27 3 3 #") ("
0 0 14 3 7 #"resolve"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 1 #" "
0 0 14 3 11 #"next-clause"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 37 #"                                     "
0 0 14 3 7 #"checked"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"           ("
0 0 14 3 9 #"sorted-rs"
0 0 27 3 5 #"    ("
0 0 14 3 12 #"sort-clauses"
0 0 27 3 1 #" "
0 0 14 3 10 #"resolvents"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 17 #"subsume-add-prove"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 14 3 11 #"next-clause"
0 0 27 3 1 #" "
0 0 14 3 7 #"checked"
0 0 27 3 2 #") "
0 0 14 3 12 #"rest-pending"
0 0 27 3 1 #" "
0 0 14 3 9 #"sorted-rs"
0 0 27 3 5 #"))]))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 94
(
 #";; procedura upraszczaj\304\205ca stan oblicze\305\204 bior\304\205c"
 #" pod uwag\304\231 \305\233wie\305\274o wygenerowane klauzule i"
) 0 0 27 29 1 #"\n"
0 0 18 3 46
#";; kontynuuj\304\205ca obliczenia. Do uzupe\305\202nienia."
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 17 #"subsume-add-prove"
0 0 27 3 1 #" "
0 0 14 3 7 #"checked"
0 0 27 3 1 #" "
0 0 14 3 7 #"pending"
0 0 27 3 1 #" "
0 0 14 3 3 #"new"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"   [("
0 0 14 3 5 #"null?"
0 0 27 3 1 #" "
0 0 14 3 3 #"new"
0 0 27 3 19 #")                 ("
0 0 14 3 13 #"resolve-prove"
0 0 27 3 1 #" "
0 0 14 3 7 #"checked"
0 0 27 3 1 #" "
0 0 14 3 7 #"pending"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"   "
0 0 18 3 98
(
 #";; je\305\233li klauzula do przetworzenia jest sprzeczna to jej wypr"
 #"owadzenie jest dowodem sprzeczno\305\233ci"
) 0 0 27 29 1 #"\n"
0 0 27 3 3 #"   "
0 0 18 3 24 #";; pocz\304\205tkowej formu\305\202y"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"   [("
0 0 14 3 13 #"clause-false?"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 3 #"new"
0 0 27 3 6 #"))   ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"unsat"
0 0 27 3 2 #" ("
0 0 14 3 16 #"res-clause-proof"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 3 #"new"
0 0 27 3 4 #")))]"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"   "
0 0 18 3 69
(
 #";; je\305\233li klauzula jest trywialna to nie ma potrzeby jej przet"
 #"warza\304\207"
) 0 0 27 29 1 #"\n"
0 0 27 3 5 #"   [("
0 0 14 3 15 #"clause-trivial?"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 3 #"new"
0 0 27 3 4 #")) ("
0 0 14 3 17 #"subsume-add-prove"
0 0 27 3 1 #" "
0 0 14 3 7 #"checked"
0 0 27 3 1 #" "
0 0 14 3 7 #"pending"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 3 #"new"
0 0 27 3 3 #"))]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"   ["
0 0 14 3 4 #"else"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 23 #";; TODO: zaimplementuj!"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 97
(
 #";; Poni\305\274sza implementacja nie sprawdza czy nowa klauzula nie "
 #"jest lepsza (b\304\205d\305\272 gorsza) od ju\305\274"
) 0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 28 #";; rozpatrzonych; popraw to!"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 17 #"subsume-add-prove"
0 0 27 3 1 #" "
0 0 14 3 7 #"checked"
0 0 27 3 2 #" ("
0 0 14 3 6 #"insert"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 3 #"new"
0 0 27 3 2 #") "
0 0 14 3 7 #"pending"
0 0 27 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 3 #"new"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"    ]))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 18 #"generate-valuation"
0 0 27 3 1 #" "
0 0 14 3 8 #"resolved"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 18 3 23 #";; TODO: zaimplementuj!"
0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 18 3 102
(
 #";; Ta implementacja m\303\263wi"
 #" tylko \305\274e formu\305\202a mo\305\274e"
 #" by\304\207 spe\305\202niona, ale nie"
 #" m\303\263wi jak. Uzupe\305\202nij j\304\205!"
) 0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 23 3 1 #"'"
0 0 14 3 3 #"sat"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 82
(
 #";; procedura przetwarzaj\304\205"
 #"ce wej\305\233ciowy CNF na wewn"
 #"\304\231trzn\304\205 reprezentacj\304\231 klauzul"
) 0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 13 #"form->clauses"
0 0 27 3 1 #" "
0 0 14 3 1 #"f"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 11 #"conv-clause"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 3 #"aux"
0 0 27 3 1 #" "
0 0 14 3 2 #"ls"
0 0 27 3 1 #" "
0 0 14 3 3 #"pos"
0 0 27 3 1 #" "
0 0 14 3 3 #"neg"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"       [("
0 0 14 3 5 #"null?"
0 0 27 3 1 #" "
0 0 14 3 2 #"ls"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 10 #"res-clause"
0 0 27 3 2 #" ("
0 0 14 3 22 #"remove-duplicates-vars"
0 0 27 3 2 #" ("
0 0 14 3 4 #"sort"
0 0 27 3 1 #" "
0 0 14 3 3 #"pos"
0 0 27 3 1 #" "
0 0 14 3 5 #"var<?"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 21 #"                    ("
0 0 14 3 22 #"remove-duplicates-vars"
0 0 27 3 2 #" ("
0 0 14 3 4 #"sort"
0 0 27 3 1 #" "
0 0 14 3 3 #"neg"
0 0 27 3 1 #" "
0 0 14 3 5 #"var<?"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 21 #"                    ("
0 0 14 3 11 #"proof-axiom"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 3 #"))]"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"       [("
0 0 14 3 11 #"literal-pol"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 2 #"ls"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 3 #"aux"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 2 #"ls"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"             ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 11 #"literal-var"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 2 #"ls"
0 0 27 3 3 #")) "
0 0 14 3 3 #"pos"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"             "
0 0 14 3 3 #"neg"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 3 #"aux"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 2 #"ls"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"             "
0 0 14 3 3 #"pos"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"             ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 11 #"literal-var"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 2 #"ls"
0 0 27 3 3 #")) "
0 0 14 3 3 #"neg"
0 0 27 3 5 #"))]))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 3 #"aux"
0 0 27 3 2 #" ("
0 0 14 3 11 #"clause-lits"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 2 #") "
0 0 14 3 4 #"null"
0 0 27 3 1 #" "
0 0 14 3 4 #"null"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 27 3 1 #" "
0 0 14 3 11 #"conv-clause"
0 0 27 3 2 #" ("
0 0 14 3 11 #"cnf-clauses"
0 0 27 3 1 #" "
0 0 14 3 1 #"f"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 5 #"prove"
0 0 27 3 1 #" "
0 0 14 3 4 #"form"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"let*"
0 0 27 3 3 #" (("
0 0 14 3 7 #"clauses"
0 0 27 3 2 #" ("
0 0 14 3 13 #"form->clauses"
0 0 27 3 1 #" "
0 0 14 3 4 #"form"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 17 #"subsume-add-prove"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 3 #"() "
0 0 23 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 7 #"clauses"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 94
(
 #";; procedura testuj\304\205ca: "
 #"pr\303\263buje dowie\305\233\304\207 sprzec"
 #"zno\305\233\304\207 formu\305\202y i sprawdza czy wygenerowany"
) 0 0 27 29 1 #"\n"
0 0 18 3 109
(
 #";; dow\303\263d/waluacja s\304\205 poprawne. Uwaga: \305\274eby dzia"
 #"\305\202a\305\202a dla formu\305\202 spe\305\202n"
 #"ialnych trzeba umie\304\207 wygenerowa\304\207"
) 0 0 27 29 1 #"\n"
0 0 18 3 23 #";; poprawn\304\205 waluacj\304\231."
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 15 #"prove-and-check"
0 0 27 3 1 #" "
0 0 14 3 4 #"form"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"let*"
0 0 27 3 3 #" (("
0 0 14 3 3 #"res"
0 0 27 3 2 #" ("
0 0 14 3 5 #"prove"
0 0 27 3 1 #" "
0 0 14 3 4 #"form"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"         ("
0 0 14 3 3 #"sat"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 3 #"res"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"         ("
0 0 14 3 6 #"pf-val"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 27 3 1 #" "
0 0 14 3 3 #"res"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 27 3 1 #" "
0 0 14 3 3 #"sat"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 3 #"sat"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 15 #"valuate-partial"
0 0 27 3 1 #" "
0 0 14 3 6 #"pf-val"
0 0 27 3 1 #" "
0 0 14 3 4 #"form"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 11 #"check-proof"
0 0 27 3 1 #" "
0 0 14 3 6 #"pf-val"
0 0 27 3 1 #" "
0 0 14 3 4 #"form"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 36 #";;; TODO: poni\305\274ej wpisz swoje testy"
0           0
